plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "net.minecraftforge.gradle.forge" version "6f53277"
    id "org.spongepowered.mixin" version "d5f9873d60"
}

version = "3.1.3"
group= "me.a0g"
archivesBaseName = "hyk"

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'


minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = false
    clientRunArgs += ["--tweakClass gg.essential.loader.stage0.EssentialSetupTweaker","--mixin mixins.hyk.json"]
    clientJvmArgs += "-Dfml.coreMods.load=me.a0g.hyk.tweaker.ASMTweaker"
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

repositories {
    //jcenter()
    mavenCentral()
    maven { url "https://repo.sk1er.club/repository/maven-public" }
    maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
    maven {
        name = "Jitpack"
        url = "https://jitpack.io/"
    }
}

dependencies {
    implementation 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'


    embed('com.github.jagrosh:DiscordIPC:e29d6d8') {
        exclude module: 'log4j'
    }

    embed "gg.essential:loader-launchwrapper:1.1.2"
    implementation "gg.essential:essential-1.8.9-forge:1576+release-launch"

    annotationProcessor 'org.spongepowered:mixin:0.7.11-SNAPSHOT'
    compileOnly 'org.spongepowered:mixin:0.7.11-SNAPSHOT'
    /*annotationProcessor 'com.google.code.gson:gson:2.2.4'
    annotationProcessor 'com.google.guava:guava:21.0'
    annotationProcessor 'org.ow2.asm:asm-tree:6.2'
    annotationProcessor 'org.apache.logging.log4j:log4j-core:2.0-beta9'*/
}

/**
 * This task simply replaces the `${version}` and `${mcversion}` properties in the mcmod.info with the data from Gradle
 */
processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

/*
ext {
    mixinSrg = new File(project.buildDir, 'tmp/mixins/mixins.srg')
    mixinRefMap = new File(project.buildDir, 'tmp/mixins/hyk.mixins.refmap.json')
}

compileJava {
    options.compilerArgs += [
            "-AoutSrgFile=${project.mixinSrg.canonicalPath}",
            "-AoutRefMapFile=${project.mixinRefMap.canonicalPath}",
            "-AreobfSrgFile=${project.file('build/mcp-srg.srg').canonicalPath}"
    ]
}
*/

mixin {
    disableRefMapWarning = true
    defaultObfuscationEnv searge
    add sourceSets.main, "mixins.hyk.refmap.json"
}

/*task copySrg(type: Copy, dependsOn: 'genSrgs') {
    from {project.tasks.genSrgs.mcpToSrg}
    into 'build'
}*/
//compileJava.dependsOn copySrg

//reobfJar.addSecondarySrgFile project.mixinSrg

/**
 * This task simply moves resources so they can be accessed at runtime, Forge is quite weird isn't it
 */
/*task moveResources {
    doLast {
        ant.move file: "${buildDir}/resources/main",
                todir: "${buildDir}/classes/java"
    }
}

moveResources.dependsOn processResources
classes.dependsOn moveResources*/

jar {
    dependsOn configurations.embed
    archiveFileName =  "${archivesBaseName}-${project.version}.jar"
    from(configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'club.sk1er.vigilance.example.ExampleMod', 'dummyThing'
        def i = 0
        filesMatching("META-INF/NOTICE*") { name = "$name.${i++}" }
        filesMatching("META-INF/LICENSE*") { name = "$name.${i++}" }
        filesMatching("META-INF/mods.toml") { name = "$name.${i++}" }
        filesMatching("LICENSE*") { name = "$name.${i++}" }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    //from files(project.mixinRefMap.canonicalPath)
    manifest {
        attributes(
                "FMLCorePluginContainsFMLMod": "true",
                "ForceLoadAsMod": "true",
                "FMLCorePlugin": "me.a0g.hyk.tweaker.ASMTweaker",
                "TweakClass": "gg.essential.loader.stage0.EssentialSetupTweaker",
                "TweakOrder": "0",
                "ModSide": "CLIENT",
                "FMLAT": "hyk_at.cfg",
                'MixinConfigs': 'mixins.hyk.json'
        )
    }
   // enabled = false

}

